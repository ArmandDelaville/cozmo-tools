from cozmo.util import Pose
from cozmo.objects import LightCube

from .nodes import *
from .transitions import *
from .transform import wrap_angle
from .pilot import PilotToPose, PilotCheckStart
from .worldmap import LightCubeObj
from .doorpass import WallPilotToPose
from .trace import tracefsm

from math import sin, cos, atan2, pi, sqrt

class GoToCube(StateNode):

    def __init__(self, cube=None):
        self.object = cube
        super().__init__()

    def start(self, event=None):
        # self.object will be set up by the parent of this node
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.children['looker'].object = self.object
        # tracefsm(1)
        super().start(event)

    def pick_side(self, dist, use_world_map):
        "NOTE: This code is only correct for upright cubes"
        cube = self.object
        if use_world_map:
            cobj = self.robot.world.world_map.objects[cube]
            x = cobj.x
            y = cobj.y
            ang = cobj.theta
            rx = self.robot.world.particle_filter.pose[0]
            ry = self.robot.world.particle_filter.pose[1]
        else:
            x = cube.pose.position.x
            y = cube.pose.position.y
            ang = cube.pose.rotation.angle_z.radians
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
        side1 = [ (x + cos(ang)*dist), (y + sin(ang)*dist), ang + pi   ]
        side2 = [ (x - cos(ang)*dist), (y - sin(ang)*dist), ang        ]
        side3 = [ (x + sin(ang)*dist), (y - cos(ang)*dist), ang + pi/2 ]
        side4 = [ (x - sin(ang)*dist), (y + cos(ang)*dist), ang - pi/2 ]
        sides = (side1, side2, side3, side4)
        sorted_sides = sorted(sides, key=lambda pt: (pt[0]-rx)**2 + (pt[1]-ry)**2)
        return sorted_sides[0]

    def almost_docked(self, side, use_world_map):
        """Returns True if we're almost docked with the cube so we don't
        need to check for collisions."""
        if use_world_map:
            rx = self.robot.world.particle_filter.pose[0]
            ry = self.robot.world.particle_filter.pose[1]
            rtheta = self.robot.world.particle_filter.pose[2]
        else:
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            rtheta = self.robot.pose.rotation.angle_z.radians
        dist = math.sqrt((rx-side[0])**2 + (ry-side[1])**2)
        relative_angle = abs(wrap_angle(rtheta-side[2]) % (pi/2)) * (180/pi)
        return (dist < 100) and (relative_angle < 10)

    class GoToSide(PilotToPose):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            cube = self.parent.object
            print('Selected cube',self.parent.wmobject)
            (x, y, theta) = self.parent.pick_side(100, use_world_map=True)
            self.target_pose = Pose(x, y, self.robot.pose.position.z,
                                    angle_z=Angle(radians = wrap_angle(theta)))
            print('pickup.GoToSide: traveling to (%.1f, %.1f) @ %.1f deg.' %
                  (self.target_pose.position.x, self.target_pose.position.y,
                   self.target_pose.rotation.angle_z.degrees))
            super().start(event)

    class ReportPosition(StateNode):
        def __init__(self,id=None):
            super().__init__()
            self.id_string = id + ': ' if id else ''

        def start(self,event=None):
            super().start(event)
            cube = self.parent.object
            if cube.is_visible:
                vis = 'visible'
            else:
                vis = 'not visible'
            cx = cube.pose.position.x
            cy = cube.pose.position.y
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            dx = cx - rx
            dy = cy - ry
            dist = math.sqrt(dx*dx + dy*dy)
            bearing = wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) * 180/pi
            print('%scube %s at (%5.1f,%5.1f)  robot at (%5.1f,%5.1f)  dist=%5.1f  brg=%5.1f' %
                  (self.id_string, vis, cx, cy, rx, ry, dist, bearing))

    class TurnToCube(SmallTurn):
        def __init__(self, offset=0, check_vis=False):
            self.offset = offset
            self.check_vis = check_vis
            super().__init__()

        def start(self, event=None):
            if self.running: return
            cube = self.parent.object
            if self.check_vis and not cube.is_visible:
                print('** TurnToCube could not see the cube.')
                self.angle = None # Angle(0)
                super().start(event)
                self.post_failure()
            else:
                (cx, cy, _) = self.parent.pick_side(self.offset, False)
                rx = self.robot.pose.position.x
                ry = self.robot.pose.position.y
                dx = cx - rx
                dy = cy - ry
                dist = math.sqrt(dx*dx + dy*dy)
                self.angle = wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) \
                             * 180/pi
                if abs(self.angle) < 2:
                    self.angle = 0
                print('TurnToCube: cube at (%5.1f,%5.1f)  robot at (%5.1f,%5.1f)  dist=%5.1f  angle=%5.1f' %
                      (cx, cy, rx, ry, dist, self.angle))
                super().start(event)

    class CheckAlmostDocked(StateNode):
        def start(self, event=None):
            if self.running: return
            super().start(event)
            cube = self.parent.object
            if not cube.is_visible:
                self.post_failure()
            side = self.parent.pick_side(25, False)
            if self.parent.almost_docked(side,False):
                self.post_success()
            else:
                self.post_failure()

    class ForwardToCube(Forward):
        def __init__(self, offset):
            self.offset = offset
            super().__init__()

        def start(self, event=None):
            if self.running: return
            cube = self.parent.object
            dx = cube.pose.position.x - self.robot.pose.position.x
            dy = cube.pose.position.y - self.robot.pose.position.y
            self.distance = Distance(sqrt(dx*dx + dy*dy) - self.offset)
            super().start(event)

    $setup{
        droplift: SetLiftHeight(0) =T(0.5)=>    # allow time for vision to set up world map
           {looker, check_almost_docked_0}

        looker: LookAtObject()

        check_almost_docked_0: StateNode() =T(1)=> check_almost_docked
        
        check_almost_docked: self.CheckAlmostDocked()
        check_almost_docked =S=> go_cube2
        check_almost_docked =F=> check_start

        check_start: PilotCheckStart()
        check_start =S=> go_side
        check_start =F=> Forward(-80) =C=> StateNode() =T(0.5)=> check_start

        go_side: self.GoToSide()
        go_side =F=> ParentFails()
        go_side =C=> self.ReportPosition('go_side')
            =T(0.75)=> self.ReportPosition('go_side')
            =T(0.75)=> self.ReportPosition('go_side')
            =N=> go_cube1

        go_cube1: self.TurnToCube(0,True) =C=>
            self.ReportPosition('go_cube1') =T(0.75)=> self.ReportPosition('go_cube1')
            =T(0.75)=> self.ReportPosition('go_cube1') =N=> approach
        go_cube1 =F=> Forward(-80) =C=> StateNode() =T(1)=> go_cube2

        approach: self.ForwardToCube(60) =C=>
            self.ReportPosition('approach') =T(0.75)=> self.ReportPosition('approach') =T(0.75)=>
            self.ReportPosition('approach') =N=>
            self.TurnToCube(0,False) =C=> self.ForwardToCube(15) =C=> end

        go_cube2: self.TurnToCube(0,True)
        go_cube2 =F=> Print("Cube Lost") =N=> ParentFails()
        go_cube2 =C=> self.ForwardToCube(60) =C=>
            self.TurnToCube(0,False) =C=> self.ForwardToCube(20) =C=> end

        end: ParentCompletes()
    }

class SetCarrying(StateNode):
    def __init__(self,objparam=None):
        self.objparam = objparam
        self.object = None
        super().__init__()
        
    def start(self, event=None):
        if self.objparam is not None:
            self.object = self.objparam
        elif self.object is None:
            self.object = self.parent.object
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.robot.carrying = self.wmobject
        self.wmobject.update_from_sdk = False
        self.wmobject.pose_confidence = +1
        super().start(event)
        self.post_completion()

class SetNotCarrying(StateNode):
    def start(self,event=None):
        # Don't resume SDK updating until cube is visible again
        if self.robot.carrying:
            wmobject = self.robot.carrying
            if isinstance(wmobject, LightCubeObj) and wmobject.is_visible:
                wmobject.update_from_sdk = True
        self.robot.carrying = None
        super().start(event)
        self.post_completion()

class PickUpCube(StateNode):
    "Pick up a cube using our own dock and verify routines."
    
    class VerifyPickup(StateNode):
        def probe_column(self, im, col, row_start, row_end):
            """
            Probe one column of the image, looking for the top horizontal
            black bar of the cube marker.  This bar should be 22-24 pixels
            thick.  Use adaptive thresholding by sorting the pixels and
            finding the darkest ones to set the black threshold.
            """
            pixels = [float(im[r,col,0]) for r in range(row_start,row_end)]
            #print('Column ',col,':',sep='')
            #[print('%4d' % i,end='') for i in pixels]
            pixels.sort()
            npix = len(pixels)
            bindex = 1
            bsum = pixels[0]
            bmax = pixels[0]
            bcnt = 1
            windex = npix-2
            wsum = pixels[npix-1]
            wmin = pixels[npix-1]
            wcnt = 1
            while bindex < windex:
                if abs(bmax-pixels[bindex]) < abs(wmin-pixels[windex]):
                    i = bindex
                    bindex += 1
                else:
                    i = windex
                    windex -= 1
                bmean = bsum / bcnt
                wmean = wsum / wcnt
                val = pixels[i]
                if abs(val-bmean) < abs(val-wmean):
                    bsum += val
                    bcnt += 1
                    bmax = max(bmax,val)
                else:
                    wsum += val
                    wcnt +=1
                    wmin = min(wmin,val)
            black_thresh = bmean + (bmax-bmean)/4;
            index = 0
            black_run_length = 0
            # initial white run
            while index < npix and pixels[index] > black_thresh:
                index += 1
            if index == npix: return -1
            while index < npix and pixels[index] <= black_thresh:
                black_run_length += 1
                index +=1
            if index >= npix-5:
                return -1
            else:
                return black_run_length

        def old_probe_column(self, im, col, row_start, row_end):
            """
            Probe one column of the image, looking for the top horizontal
            black bar of the cube marker.  This bar should be 22-24 pixels
            thick.  Use adaptive thresholding by sorting the pixels and
            finding the darkest ones to set the black threshold.
            """
            pixels = [im[r,col,0] for r in range(row_start,row_end)]
            #print('Column ',col,':',sep='')
            #[print('%4d' % i,end='') for i in pixels]
            pixels.sort()
            black_index = 10  # start with the 10th darkest pixel
            black_thresh = pixels[black_index] + 4
            last_pixel = len(pixels) - 1
            while black_index < last_pixel and pixels[black_index+1] <= black_thresh:
                black_index += 1
                black_thresh = pixels[black_index] + 4
            white_thresh = pixels[black_index] + 20
            print('\nblack_thresh=',black_thresh,'  black_index=',black_index, '  white_thresh=',white_thresh)
            # initial white segment
            row = row_start
            while row <= row_end:
                if im[row,col,0] < white_thresh: break
                row += 1
            # gray transition
            for i in range(5):
                if im[row,col,0] <= black_thresh: break
                row += 1
            # black segment
            black_start = row
            run_length = 0
            while row <= row_end:
                if im[row,col,0] > black_thresh: break
                run_length += 1
                row += 1
            if row > row_end:  # black to the end; no final white
                return -1
            run_length = row - black_start
            # gray transition
            for i in range(min(5,row_end-row+1)):
                if im[row,col,0] >= white_thresh: break
                row += 1
            # final white segment
            final_whites = 0
            while row <= row_end:
                if im[row,col,0] < white_thresh:
                    #print('col=',col,'  row=',row,'  im =',im[row,col],
                    #      ' white_thresh=',white_thresh,' black_thresh=',black_thresh,'  run_length=',run_length)
                    if final_whites >= 2:
                        break
                    else:
                        return -2
                row += 1
                final_whites += 1
            return run_length
                    
        def start(self,event=None):
            super().start(event)
            im = np.array(self.robot.world.latest_image.raw_image)
            min_length = 14
            max_length = 24
            bad_runs = 0
            print('Verifying pickup. ',
                  ' hangle=', self.robot.head_angle.degrees,
                  ' langle=', self.robot.lift_angle.degrees,
                  ' lheight=', self.robot.lift_height.distance_mm,
                  '  Run widths: ',end='')
            for col in range(100,220,20):
                run_length = self.probe_column(im, col, 10, 70)
                print(run_length,' ',end='')
                if run_length < min_length or run_length > max_length:
                    bad_runs += 1
            print('  bad_runs:', bad_runs)
            if bad_runs < 2:
                self.post_success()
            else:
                self.post_failure()                

    def __init__(self, cube=None):
        self.object = cube
        super().__init__()

    def picked_up_handler(self):
        print("PickUpCube aborting because robot was picked up.")
        self.post_failure()
        self.stop()

    # PickUpCube start:
    def start(self, event=None):
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.children['goto_cube'].object = self.object
        super().start(event)

    $setup{  # PickUpCube machine
        goto_cube: GoToCube()
        goto_cube =F=> ParentFails()
        goto_cube =C=> AbortAllActions() # clear head and lift tracks
          =C=> {raise_lift, raise_head}

        raise_lift: SetLiftHeight(0.7)
        raise_head: SetHeadAngle(25)

        {raise_lift, raise_head} =C=> verify

        verify: self.VerifyPickup()
        verify =S=> satisfied
        verify =F=> StateNode() =T(0.2)=> verify2
        verify2: self.VerifyPickup()
        verify2 =S=> satisfied
        verify2 =F=> StateNode() =T(0.2)=> verify3
        verify3: self.VerifyPickup()
        verify3 =S=> satisfied
        verify3 =F=> frustrated

        satisfied: AnimationTriggerNode(trigger=cozmo.anim.Triggers.ReactToBlockPickupSuccess,
                                        ignore_body_track=True,
                                        ignore_head_track=True,
                                        ignore_lift_track=True)
        satisfied =C=> {final_raise, drop_head}

        final_raise: SetLiftHeight(1.0)
        drop_head: SetHeadAngle(0)
        {final_raise, drop_head} =C=> SetCarrying() =N=> ParentCompletes()

        frustrated: AnimationTriggerNode(trigger=cozmo.anim.Triggers.FrustratedByFailure,
                                         ignore_body_track=True,
                                         ignore_head_track=True,
                                         ignore_lift_track=True) =TM=>  # =C=>
        missed_cube: SetNotCarrying() =C=> Forward(-5) =C=> {drop_lift, drop_head_low}

        drop_lift: SetLiftHeight(0)
        drop_head_low: SetHeadAngle(-20)
        {drop_lift, drop_head_low} =C=> ParentFails()

        }

class DropObject(StateNode):
    def __init__(self):
        self.wmobject = None
        super().__init__()

    class RememberCarriedObject(StateNode):
        def start(self,event=None):
            super().start(event)
            self.parent.wmobject = self.robot.carrying

    class SetPosition(StateNode):
        def start(self,event=None):
            super().start(event)
            if self.parent.wmobject:
                self.parent.wmobject.pose_confidence = +1

    $setup {
        self.RememberCarriedObject() =N=> SetLiftHeight(0) =C=>
          SetNotCarrying() =N=> self.SetPosition() =N=> Forward(-10) =C=> ParentCompletes()
    }


class PickUpCubeForeign(StateNode):

    def __init__(self, cube_id=None):
        self.object_id = cube_id
        super().__init__()

    def start(self, event=None):
        # self.object will be set up by the parent of this node
        self.object = self.robot.world.light_cubes[self.object_id]
        self.foreign_cube_id = 'LightCubeForeignObj-'+str(self.object_id)
        super().start(event)

    def pick_side(self, dist, use_world_map):
        "NOTE: This code is only correct for upright cubes"
        cube = self.foreign_cube_id
        cobj = self.robot.world.world_map.objects[cube]
        x = cobj.x
        y = cobj.y
        ang = cobj.theta
        rx = self.robot.world.particle_filter.pose[0]
        ry = self.robot.world.particle_filter.pose[1]

        side1 = (x + cos(ang) * dist, y + sin(ang) * dist, ang + pi)
        side2 = (x - cos(ang) * dist, y - sin(ang) * dist, ang)
        side3 = (x + sin(ang) * dist, y - cos(ang) * dist, ang + pi/2)
        side4 = (x - sin(ang) * dist, y + cos(ang) * dist, ang - pi/2)
        sides = [side1, side2, side3, side4]
        sorted_sides = sorted(sides, key=lambda pt: (pt[0]-rx)**2 + (pt[1]-ry)**2)
        return sorted_sides[0]

    class GoToSide(WallPilotToPose):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            cube = self.parent.foreign_cube_id
            print('Selected cube',self.robot.world.world_map.objects[cube])
            (x, y, theta) = self.parent.pick_side(200, True)
            self.target_pose = Pose(x, y, self.robot.pose.position.z,
                                    angle_z=Angle(radians = wrap_angle(theta)))
            print('pickup.GoToSide: traveling to (%.1f, %.1f) @ %.1f deg.' %
                  (self.target_pose.position.x, self.target_pose.position.y,
                   self.target_pose.rotation.angle_z.degrees))
            super().start(event)

    class Pick(PickUpCube):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            self.object = self.parent.object
            super().start(event)

    $setup{  # PickUpCube machine
        goto_cube: self.GoToSide() =C=> one

        one: self.Pick() =C=> end
        end: Say("Done") =C=> ParentCompletes()
        }
